var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { CallToolRequestSchema, ListToolsRequestSchema } from "@modelcontextprotocol/sdk/types.js";
import { logger } from "./config/logger.js";
import { TOOLS } from "./tools/definitions.js";
import { handleToolCall } from "./tools/handlers.js";
import { setupResourceHandlers } from "./resources/handlers.js";
import { closeBrowser } from "./browser/connection.js";
// Initialize global state
const state = {
    consoleLogs: [],
    screenshots: new Map(),
};
// Create and configure server
const server = new Server({
    name: "example-servers/puppeteer",
    version: "0.1.0",
}, {
    capabilities: {
        resources: {},
        tools: {},
    },
});
// Setup resource handlers
setupResourceHandlers(server, state);
// Setup tool handlers
server.setRequestHandler(ListToolsRequestSchema, () => __awaiter(void 0, void 0, void 0, function* () {
    return ({
        tools: TOOLS,
    });
}));
server.setRequestHandler(CallToolRequestSchema, (request) => __awaiter(void 0, void 0, void 0, function* () { var _a; return handleToolCall(request.params.name, (_a = request.params.arguments) !== null && _a !== void 0 ? _a : {}, state, server); }));
// Handle server shutdown
process.stdin.on("close", () => __awaiter(void 0, void 0, void 0, function* () {
    logger.info("Puppeteer MCP Server closing");
    yield closeBrowser();
    yield server.close();
}));
// Start the server
export function runServer() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            logger.info('Starting MCP server');
            const transport = new StdioServerTransport();
            yield server.connect(transport);
            logger.info('MCP server started successfully');
        }
        catch (error) {
            logger.error('Failed to start server:', error);
            process.exit(1);
        }
    });
}
